import os
import subprocess
import argparse
import shutil
import zipfile
from concurrent.futures import ThreadPoolExecutor
import requests
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def download_file(url, destination):
    try:
        response = requests.get(url, stream=True)
        with open(destination, 'wb') as file:
            for chunk in response.iter_content(chunk_size=8192):
                file.write(chunk)
        logging.info(f"Downloaded {url} to {destination}")
    except requests.RequestException as e:
        logging.error(f"Failed to download {url}: {e}")

def install_dependencies():
    try:
        # Install pip if not already installed
        subprocess.run(["sudo", "apt-get", "install", "-y", "python3-pip"], check=True)
        logging.info("Installed python3-pip")
        
        # Install requests library
        subprocess.run(["sudo", "pip", "install", "requests"], check=True)
        logging.info("Installed requests library")
        
        # Install other necessary dependencies
        subprocess.run(["sudo", "apt-get", "install", "-y", "john", "hash-identifier"], check=True)
        logging.info("Installed john and hash-identifier")
        
        # Install stegseek
        stegseek_repo = "https://github.com/RickdeJager/stegseek"
        subprocess.run(["sudo", "git", "clone", stegseek_repo], check=True)
        os.chdir("stegseek")
        subprocess.run(["sudo", "make"], check=True)
        subprocess.run(["sudo", "make", "install"], check=True)
        os.chdir("..")
        shutil.rmtree("stegseek")
        logging.info("Installed stegseek")
        
        # Install pkcrack
        pkcrack_repo = "https://github.com/keyunluo/pkcrack"
        subprocess.run(["sudo", "git", "clone", pkcrack_repo], check=True)
        os.chdir("pkcrack")
        subprocess.run(["sudo", "make"], check=True)
        subprocess.run(["sudo", "make", "install"], check=True)
        os.chdir("..")
        shutil.rmtree("pkcrack")
        logging.info("Installed pkcrack")
        
        # Create necessary directories
        os.makedirs("Jailbreak/Jailhouse/steg_result", exist_ok=True)
        os.makedirs("Jailbreak/Jailhouse/hashfile", exist_ok=True)
        os.makedirs("Jailbreak/wordlist", exist_ok=True)
        os.makedirs("Jailbreak/Freedom", exist_ok=True)
        logging.info("Created necessary directories")

        # Define the wordlist URLs and filenames
        wordlists = {
            "rockyou.txt": "https://github.com/ohmybahgosh/RockYou2021.txt",
            "betterrockyou.txt": "https://github.com/Leminee/BetterRockyou",
        }

        for filename, url in wordlists.items():
            logging.info(f"Downloading {filename} from {url}")
            download_file(url, filename)
            # Move the downloaded wordlist to the wordlist directory
            wordlist_source = filename
            wordlist_destination = f"Jailbreak/wordlist/{filename}"
            shutil.move(wordlist_source, wordlist_destination)
            logging.info(f"Moved {filename} to {wordlist_destination}")
        
        logging.info("Dependencies installed, directories created, and wordlists downloaded and moved successfully.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to install dependencies: {e}")
    except OSError as e:
        logging.error(f"Failed to create directories or move the wordlists: {e}")

def run_stegseek(filepath, wordlist_path, steg_result_file):
    try:
        subprocess.run(["stegseek", filepath, wordlist_path, "-o", steg_result_file], check=True)
        logging.info(f"Ran stegseek on {filepath} with wordlist {wordlist_path}")
        return True
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to
